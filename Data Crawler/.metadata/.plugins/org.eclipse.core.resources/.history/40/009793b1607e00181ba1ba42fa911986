import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.text.ParseException;
import java.text.SimpleDateFormat;


import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;

public class Chrome {
	private static final SimpleDateFormat sdf = new SimpleDateFormat("yyyy.MM.dd.HH.mm.ss");	
	
	WebDriver driver = new ChromeDriver();
	
	int contractID = 0000;
	
	String url = "https://www.predictit.org/PrivateData/GetPriceListAjax?contractId=";
	
	ArrayList<ArrayList<Integer>> data = new ArrayList<ArrayList<Integer>>();

	Date oldDate;
	
	int dataCount = 0;
	
	public Chrome() {
		 // Optional, if not specified, WebDriver will search your path for chromedriver.
		  System.setProperty("webdriver.chrome.driver", "chromedriver.exe");
		  driver.manage().timeouts().implicitlyWait(0, TimeUnit.MILLISECONDS);

		  
		  //WebElement searchBox = driver.findElement(By.name("q"));
		  //searchBox.sendKeys("ChromeDriver");
		  //searchBox.submit();
		  
	}
	
	private void openBrowser() {
		driver = new ChromeDriver();
		
	}
	
	private void closeBrowser() {
		driver.quit();

	}
	
	public void setContractID(int contractID) {
		this.contractID = contractID;

	}
	
	public void start() throws EncryptedDocumentException, InvalidFormatException, IOException {
		
		for(int i = 0; i < 5; ++i) {
			driver.get(url + contractID);

			ArrayList<ArrayList<WebElement>> inputData = new ArrayList<ArrayList<WebElement>>();
			
			int index = 2;
			ArrayList<WebElement> elements = (ArrayList<WebElement>) driver.findElements(By.xpath("/html/body/div[2]/div[1]/div/div[2]/table/tbody/tr[" + index + "]/td"));
			while(elements.size() > 0) {
	//			for(int i = 0; i < elements.size(); ++i) {
	//				System.out.print(elements.get(i).getText().replaceAll("[^\\d]", "" ) + "  ");
	//			}
	//			System.out.println();
				
				elements.remove(2);
				inputData.add(elements);
						
				++index;
				elements = (ArrayList<WebElement>) driver.findElements(By.xpath("/html/body/div[2]/div[1]/div/div[2]/table/tbody/tr[" + index + "]/td"));
			}
			
			if(checkNew(inputData)) {
				writeData(inputData);
				++dataCount;

			}
			
		}
		
		closeBrowser();
	}
	
	private boolean checkNew(ArrayList<ArrayList<WebElement>> inputData) {
		if(inputData.size() != data.size()) return true;
		
		for(int r = 0; r < inputData.size(); ++r) {
			if(inputData.get(r).size() != data.get(r).size()) return true;

			for(int c = 0; c < inputData.get(r).size(); c++) {
				if(Integer.parseInt(inputData.get(r).get(c).getText()) != data.get(r).get(c)) return true;

			}
		}
		
		return false;
	}

	private void writeData(ArrayList<ArrayList<WebElement>> inputData) throws EncryptedDocumentException, InvalidFormatException, IOException {
		Workbook workbook;
		
		File file = new File("contract_" + contractID + ".xlsx");
		if(file.exists()) 
			workbook = WorkbookFactory.create(new File("contract_" + contractID + ".xlsx"));
		else
			workbook = new XSSFWorkbook();
		
		Sheet sheet;
		if(workbook.getNumberOfSheets() == 0)
			sheet = workbook.createSheet("" + contractID);
		else
			sheet = workbook.getSheet(("" + contractID));

		//create necessary cells
		for(int r = 0; r < inputData.size() + 2; ++r) {
			Row row = sheet.getRow(r);
			if(row == null) sheet.createRow(r);
			for(int c = 0; c < 5; ++c) {
				sheet.getRow(r).createCell((5 * dataCount) + c);
			}
		}
		
	    sheet.addMergedRegion(new CellRangeAddress(0, 0, (5 * dataCount), (5 * dataCount) + 1));
	    sheet.getRow(0).getCell(5 * dataCount).setCellValue("Buy Yes");

	    sheet.addMergedRegion(new CellRangeAddress(0, 0, (5 * dataCount) + 2, (5 * dataCount) + 3));
	    sheet.getRow(0).getCell((5 * dataCount) + 2).setCellValue("Buy No");
    	
	    
	    //System.out.println(inputData.size());
	    for(int r = 0; r < inputData.size(); ++r) {
	    	//System.out.println("size  " + inputData.get(r).size());
	    	for(int c = 0; c < inputData.get(r).size(); ++c) {
	    	    Row r1 = sheet.getRow(1 + r);
	    	    
	    	    Cell c1 = r1.getCell((5 * dataCount) + c);
	    	    //System.out.println(r + "  " + c + "  " + inputData.get(r).get(c).getText());
	    	    c1.setCellValue(inputData.get(r).get(c).getText().replaceAll("[^\\d]", "" ) + "  ");
	    	}
	    }
	    
	    Date newDate = new Date();
	    sheet.getRow(inputData.size() + 1).getCell(5 * dataCount).setCellValue("Time");
	    sheet.getRow(inputData.size() + 1).getCell((5 * dataCount) + 1).setCellValue("" + sdf.format(newDate));

	    if(dataCount > 0)
		    	sheet.getRow(inputData.size() + 1).getCell((5 * dataCount) + 3).setCellValue(newDate.getTime()-oldDate.getTime());
	    else
	    	sheet.getRow(inputData.size() + 1).getCell((5 * dataCount) + 3).setCellValue(0);

	    oldDate = newDate;

	    FileOutputStream fileOut = new FileOutputStream("contract_" + contractID + ".xlsx");
        workbook.write(fileOut);
        fileOut.close();

	}
	
}
